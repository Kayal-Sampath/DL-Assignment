# -*- coding: utf-8 -*-
"""Code_Demo_DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1db8_fv4E-eRIX_nQXrkz4lBolkoNObtk

### **2. Dataset**

**Dataset:** Medical Researcher Compilation data

**Description:** Data about a set of 200 patients, all of whom suffered from the same illness. 
During their course of treatment, each patient responded to one of 5 medications, Drug a, Drug b, Drug c, Drug x and y.

**To find:** Which drug might be appropriate for a future patient with the same illness. 

**Features:** Age, Sex, Blood Pressure, and Cholesterol of patients

**Target:** The drug that each patient responded to.
"""

!wget -O drug200.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/drug200.csv

import pandas as pd

my_data = pd.read_csv("drug200.csv", delimiter=",")
my_data.head

"""### **Data pre-processing**"""

X = my_data[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values
X[0:5]

from sklearn import preprocessing
le_sex = preprocessing.LabelEncoder()
le_sex.fit(['F','M'])
X[:,1] = le_sex.transform(X[:,1]) 


le_BP = preprocessing.LabelEncoder()
le_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])
X[:,2] = le_BP.transform(X[:,2])


le_Chol = preprocessing.LabelEncoder()
le_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = le_Chol.transform(X[:,3]) 

X[0:5]

y = my_data["Drug"]
y[0:5]

"""###  **Algorithm 1: KNN**

**Cross validation : 60-40**
"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.4)
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train,Y_train)
predknn = knn.predict(X_test)

from sklearn import metrics


print("KNN's Accuracy: ", metrics.accuracy_score(Y_test, predknn))

"""**Cross validation : 70-30**"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.3)
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train,Y_train)
predknn = knn.predict(X_test)

from sklearn import metrics
print("KNN's Accuracy: ", metrics.accuracy_score(Y_test, predknn))

"""**Cross validation : 80-20**"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.2)
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train,Y_train)
predknn = knn.predict(X_test)

from sklearn import metrics
print("KNN's Accuracy: ", metrics.accuracy_score(Y_test, predknn))

"""**Cross validation : 90-10**"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.1)
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train,Y_train)
predknn = knn.predict(X_test)

from sklearn import metrics
print("KNN's Accuracy: ", metrics.accuracy_score(Y_test, predknn))

"""###  **Algorithm 2: Decision Tree**

**Cross validation : 60-40**
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.4)
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
drugTree.fit(X_train,Y_train)
predTree = drugTree.predict(X_test)

from sklearn import metrics
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(Y_test, predTree))

"""**Cross validation : 70-30**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.3,)
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
drugTree.fit(X_train,Y_train)
predTree = drugTree.predict(X_test)

from sklearn import metrics
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(Y_test, predTree))

"""**Cross validation : 80-20**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.2,)
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
drugTree.fit(X_train,Y_train)
predTree = drugTree.predict(X_test)

from sklearn import metrics
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(Y_test, predTree))

"""**Cross validation : 90-10**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.1,)
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
drugTree.fit(X_train,Y_train)
predTree = drugTree.predict(X_test)

from sklearn import metrics
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(Y_test, predTree))

"""###  **Algorithm 3: Logistic Regression**

**Cross validation : 60-40**
"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.4,)
LR = LogisticRegression(C=0.01, solver='liblinear')
LR.fit(X_train,Y_train)
predLR = LR.predict(X_test)

from sklearn import metrics
print("Logistic Regression's Accuracy: ", metrics.accuracy_score(Y_test, predLR))

"""**Cross validation : 70-30**"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.3,)
LR = LogisticRegression(C=0.01, solver='liblinear')
LR.fit(X_train,Y_train)
predLR = LR.predict(X_test)

from sklearn import metrics
print("Logistic Regression's Accuracy: ", metrics.accuracy_score(Y_test, predLR))

"""**Cross validation : 80-20**"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.2,)
LR = LogisticRegression(C=0.01, solver='liblinear')
LR.fit(X_train,Y_train)
predLR = LR.predict(X_test)

from sklearn import metrics
print("Logistic Regression's Accuracy: ", metrics.accuracy_score(Y_test, predLR))

"""**Cross validation : 90-10**"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size= 0.1,)
LR = LogisticRegression(C=0.01, solver='liblinear')
LR.fit(X_train,Y_train)
predLR = LR.predict(X_test)

from sklearn import metrics
print("Logistic Regression's Accuracy: ", metrics.accuracy_score(Y_test, predLR))

"""**To download as pdf**"""

!wget -nc https://raw.githubusercontent.com/brpy/colab-pdf/master/colab_pdf.py
from colab_pdf import colab_pdf
colab_pdf('Demo_DL.ipynb')